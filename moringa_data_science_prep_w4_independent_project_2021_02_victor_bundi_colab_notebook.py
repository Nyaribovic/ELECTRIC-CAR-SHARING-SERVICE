# -*- coding: utf-8 -*-
"""Moringa_Data_Science_Prep_W4_Independent_Project_2021_02_Victor_Bundi_Colab_NoteBook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WL1fX8XrUcNSeLrp4wVfXr6Q2plRNwbT

**LOADING LIBRARIES TO BE USED**
"""

#import libraries to be used.
import numpy as np  
import pandas as pd
import dateutil
import matplotlib.pyplot as plt

"""**READING IN THE AUTOLIB DATASET**"""

#Importing  the Autolib_dataset
url_path = 'http://bit.ly/autolib_dataset'
Autolib_dataset = pd.read_csv(url_path)

"""**DATA UNDERSTANDING**

"""

##Preview  the Imported Autolib_dataset. 
Autolib_dataset.head(5)

#Generate descriptive statistics for Autolib_dataset.
Autolib_dataset.info()

#preview of the shape of DataFrame.
#The search for missings is usually one of the first steps in data analysis. 
Autolib_dataset.shape

"""**DATA PREPARATION** """

#check if there are any missing values.
Autolib_dataset.isna().any().any()

#The frequency of Missings values.
#At the beginning, the question is whether there are any missings at all and, if so, how many there are.
Autolib_dataset.isna().sum().sum()

#Dropping the unnecessary columns.
#Displayed comment: The column has very few entries 111 and adds no value to our analysis
#Public name:The column adds no value to our analyis
#Address :The column adds no value to our analyis
#Scheduled at: Has very few entries  only 47 in numbers
##Geo point: Since we are not creating maps it adds little value to our analysis.
#Subscription status :Lack of diversity in the column data hence adds little information on the analysis

Autolib_clean=Autolib_dataset.drop(columns=['Displayed comment','Public name','Address','Scheduled at' ,'Geo point','Subscription status' ])
Autolib_clean.shape

# dropping duplicate values 
Autolib_clean.drop_duplicates(keep=False,inplace=True) 
Autolib_clean.shape

#Create a column for timestamp
Autolib_clean['Timestamp']= pd.to_datetime(Autolib_clean[['year', 'month', 'day', 'hour', 'minute']])
Autolib_Timestamp=Autolib_clean
Autolib_Timestamp.head(5)

"""**ANALYSIS**

The most popular hour of the day for picking up a shared electric car (Bluecar) in the city of Paris.
"""

#To find the most popular hour of pickup we should first determine what are pick ups or drop offs .
#This can only be told by the differences in counts over time in a given station
# Create dataframe with blue car counter data
stationchanges_blue_cars= Autolib_Timestamp.loc[:,['City','ID','Postal code','Bluecar counter','Timestamp','hour']]
stationchanges_blue_cars

#Sort the stationchanges_blue_cars dataframe using Timestamp column

stationchanges_blue_cars=stationchanges_blue_cars.sort_values(by='Timestamp',ascending=True)
stationchanges_blue_cars

#Next Sort the stationchanges_blue_cars dataframe by  Postal code and Respective ID
stationchanges_blue_cars=stationchanges_blue_cars.sort_values(by=['ID','Postal code'],ascending=True)
stationchanges_blue_cars

"""Determine PICKS and DROPS
When the change is negative it means a car left thus a pick
When the change is positivetive it means an arrival thus a drop
"""

#Determine PICKS and DROPS
#When the change is negative it means a car left thus a pick
#When the change is positivetive it means an arrival thus a drop
stationchanges_blue_cars['Change'] = stationchanges_blue_cars['Bluecar counter'].diff()
stationchanges_blue_cars= stationchanges_blue_cars[stationchanges_blue_cars.Change != 0]
stationchanges_blue_cars['Action']=np.where(stationchanges_blue_cars['Change']>0, 'Drop', 'Pick')
stationchanges_blue_cars.head(10)

#Now determine the most popular hour of the day for picking.

fig, axs = plt.subplots(figsize=(12, 4))

stationchanges_blue_cars_picks=stationchanges_blue_cars[stationchanges_blue_cars['Change'] < 0]
stationchanges_blue_cars_picks.groupby(stationchanges_blue_cars_picks["hour"])["Change"].sum().plot(kind='bar', rot=0, ax=axs)
 
plt.xlabel("Hour of the day");  # custom x label using matplotlib

plt.ylabel("Number of pickups");

#The most popular hour of the day for picking up a shared electric car (Bluecar) in the city of Paris.
stationchanges_blue_cars_picks_paris=stationchanges_blue_cars[stationchanges_blue_cars['City'] =='Paris' ]


#Paris_pickups= pd.DataFrame(stationchanges_blue_cars_picks_paris.hour.value_counts().sort_values(ascending=False))
#Paris_pickups
fig, axs = plt.subplots(figsize=(12, 4))
stationchanges_blue_cars_picks_paris.groupby(stationchanges_blue_cars_picks_paris["hour"])["Change"].sum().plot(kind='bar', rot=0, ax=axs)
 
plt.xlabel("Paris Hour of the day");  # custom x label using matplotlib

plt.ylabel("Paris Number of pickups/drops");

#Now determine the most popular hour of the day for droping.

fig, axs = plt.subplots(figsize=(12, 4))

stationchanges_blue_cars_drops=stationchanges_blue_cars[stationchanges_blue_cars['Change'] > 0]
stationchanges_blue_cars_drops.groupby(stationchanges_blue_cars_drops["hour"])["Change"].sum().plot(kind='bar', rot=0, ax=axs)
 
plt.xlabel("Hour of the day");  # custom x label using matplotlib

plt.ylabel("Number of drops");

#The most popular station

popular_station = stationchanges_blue_cars.groupby([stationchanges_blue_cars['Action'],'City','ID'])["Change"].sum().sort_values(ascending=False)

popular_station= pd.DataFrame(popular_station)
popular_station.head(5)